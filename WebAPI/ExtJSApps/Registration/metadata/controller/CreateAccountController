{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "CreateAccountController"
    },
    "designerId": "65a4b174-5ba2-4812-ba07-d9ff918ccf6e",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onBackButtonIdClick",
                "fn": "onBackButtonIdClick",
                "implHandler": [
                    "var tabWizardPanel = Ext.getCmp('TabWizardId');\r",
                    "tabWizardPanel.setActiveTab(Ext.getCmp('TabWizardId').getTabIdByName('attendeeorspeaker'));"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "createAccountAlias #backButtonId"
            },
            "designerId": "88b60f9c-9d82-4f2f-9233-440e613b760b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onContinueButtonIdClick",
                "fn": "onContinueButtonIdClick",
                "implHandler": [
                    "// verify that password matches\r",
                    "// verify username does not exist\r",
                    "// verify email does not exist\r",
                    "// Then, Create user and take to either speaker or attendee details page\r",
                    "\r",
                    "var localValues =  Ext.ComponentQuery.query('createAccountAlias')[0].getForm().getValues();\r",
                    "\r",
                    "\r",
                    "//if (localValues.password === localValues.passwordConfirm) {\r",
                    "\r",
                    "// hopefully will get validation to work on form for this later (matching passwords)\r",
                    "// CreateUser\r",
                    "\r",
                    "var tabPanel = Ext.ComponentQuery.query('tabWizardPanelAlias')[0];\r",
                    "\r",
                    "var myMask = new Ext.LoadMask(Ext.getBody(), {msg:\"Creating New Account...\"});\r",
                    "myMask.show();\r",
                    "\r",
                    "localValues.recaptchaChallengeField = Recaptcha.get_challenge();\r",
                    "localValues.recaptchaResponseField =Recaptcha.get_response();\r",
                    "\r",
                    "Ext.Ajax.on('requestexception', function (conn, response, options) {\r",
                    "    myMask.hide();\r",
                    "    if (response.status != 200) {\r",
                    "        var errorData = Ext.JSON.decode(response.responseText);\r",
                    "        Ext.Msg.alert('Creating User Failed',errorData.message);\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "Ext.Ajax.request({ \r",
                    "    url:'/rpc/Account/CreateUser', \r",
                    "    actionMethods:'POST', \r",
                    "    scope:this, \r",
                    "    params: localValues,\r",
                    "    success: function(r, o) { \r",
                    "        //debugger;\r",
                    "        var retData = Ext.JSON.decode(r.responseText);\r",
                    "        tabPanel.updateAllPanelsWithData(retData);\r",
                    "\r",
                    "        // need to figure out if speaker or attendee selected\r",
                    "        // var attendeeFromFirstPage = Ext.ComponentQuery.query('AttendeeSpeakerOrSponsorAlias #rbAttendee')[0].checked;\r",
                    "        var speakerFromFirstPage = Ext.ComponentQuery.query('AttendeeSpeakerOrSponsorAlias #rbSpeaker')[0].checked;\r",
                    "        if (speakerFromFirstPage === true) {\r",
                    "            tabPanel.setActiveTab(tabPanel.getTabIdByName('SpeakerAfterLogin'));\r",
                    "        } else {\r",
                    "            tabPanel.setActiveTab(tabPanel.getTabIdByName('AttendeeAfterLogin'));\r",
                    "        }\r",
                    "        myMask.hide();\r",
                    "    },\r",
                    "    failure: function(r,o) {\r",
                    "        // handled in exception now\r",
                    "        //debugger;\r",
                    "        //Ext.Msg.alert('Creating User Failed','');\r",
                    "        console.log('Creating User Failed ' + r);\r",
                    "        //myMask.hide();\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "});"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "createAccountAlias #continueButtonId"
            },
            "designerId": "69df807a-afe1-455f-9086-38335fa2f200"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onPanelAfterRender",
                "fn": "onPanelAfterRender",
                "implHandler": [
                    "Recaptcha.create(\"6LcrXN4SAAAAAG4gTUSUCzyfaFE4-yJOIXq86PdW\",\r",
                    "Ext.getDom('recaptcha'),\r",
                    "    {\r",
                    "        theme: \"clean\",\r",
                    "        callback: Recaptcha.focus_response_field\r",
                    "    }\r",
                    ");"
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "Ext.panel.Panel",
                "designer|controlQuery": "createAccountAlias #reCaptcha"
            },
            "designerId": "8e567277-a2b8-4e84-a2bf-128e3d4b8af3"
        }
    ]
}