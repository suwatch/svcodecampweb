{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "ViewportController"
    },
    "designerId": "10d32f9d-c428-4cbd-bacc-7eb9c0e9c677",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onViewportAfterRender",
                "fn": "onViewportAfterRender",
                "implHandler": [
                    "\r",
                    "\r",
                    "// check for hash tag in URL (not sure if this is iframe only or will take from top window\r",
                    "var token = window.location.hash.substr(1);\r",
                    "if ( token ) {\r",
                    "    if (token === 'peter1') {\r",
                    "        Ext.Msg.alert(\"hash tag peter1 found\");\r",
                    "    }\r",
                    "    /*\r",
                    "    var tab = tabPanel.get(token);\r",
                    "\r",
                    "    if ( ! tab ) {\r",
                    "    // Create tab or error as necessary.\r",
                    "    tab = new Ext.Panel({\r",
                    "        itemId: token,\r",
                    "        title: 'Tab: '+ token\r",
                    "    });\r",
                    "\r",
                    "    tabPanel.add(tab);\r",
                    "}\r",
                    "\r",
                    "tabPanel.setActiveTab(tab);\r",
                    "*/\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var attendeeFromFirstPage = Ext.ComponentQuery.query('AttendeeSpeakerOrSponsorAlias #rbAttendee')[0];\r",
                    "var speakerFromFirstPage = Ext.ComponentQuery.query('AttendeeSpeakerOrSponsorAlias #rbSpeaker')[0];\r",
                    "\r",
                    "var nextPanel;\r",
                    "var myMask = new Ext.LoadMask(Ext.getBody(), {msg:\"Checking Logged In Status...\"});\r",
                    "// always check logged in status when get here\r",
                    "myMask.show();\r",
                    "// first check to see if person is already logged in.  If they are, then go edit details page as if attendee\r",
                    "var tabPanel = Ext.ComponentQuery.query('tabWizardPanelAlias')[0];\r",
                    "\r",
                    "tabPanel.getTabBar().hide();\r",
                    "tabPanel.componentLayout.childrenChanged = true;\r",
                    "tabPanel.doComponentLayout();\r",
                    "\r",
                    "Ext.Ajax.request({ \r",
                    "url:'/rpc/Account/IsLoggedIn', \r",
                    "actionMethods:'POST', \r",
                    "scope:this, \r",
                    "params:{\r",
                    "    Username: '',\r",
                    "    Password: '',\r",
                    "    RememberMe: true\r",
                    "},\r",
                    "success: function(r, o) { \r",
                    "    var retData = Ext.JSON.decode(r.responseText);\r",
                    "    tabPanel.updateAllPanelsWithData(retData);\r",
                    "    if (retData.hasSessionsCurrentYear === true) {\r",
                    "        speakerFromFirstPage.checked = true;\r",
                    "        // need to load sessions also for this attendee, the current attendee is the spaker\r",
                    "\r",
                    "        var sessionsBySpeakerStore = Ext.getCmp(\"sessionsBySpeakerGridPanelId\").getStore();\r",
                    "        sessionsBySpeakerStore.load({\r",
                    "            params: {\r",
                    "                option: 'byspeaker',\r",
                    "                param1: retData.attendeesId,\r",
                    "                param2: '-1',\r",
                    "                param3: '-1'\r",
                    "            },\r",
                    "            callback: function(records,operation,success) {\r",
                    "                var imgId = Ext.ComponentQuery.query('#SpeakerImgId')[0];\r",
                    "                var imageLocation = '/attendeeimage/' + retData.attendeesId + '.jpg?width=260&height=260&borderWidth=1&borderColor=black&scale=both';\r",
                    "                var antiCachePart = (new Date()).getTime();\r",
                    "                var newSrc = imageLocation + '&dc=' + antiCachePart;\r",
                    "                imgId.setSrc(newSrc); \r",
                    "                tabPanel.setActiveTab(tabPanel.getTabIdByName('SpeakerAfterLogin'));  \r",
                    "                myMask.hide();\r",
                    "            }\r",
                    "        });\r",
                    "    } else {\r",
                    "        attendeeFromFirstPage.checked = true;\r",
                    "        tabPanel.setActiveTab(tabPanel.getTabIdByName('AttendeeAfterLogin'));\r",
                    "        myMask.hide();\r",
                    "    }\r",
                    "},\r",
                    "failure: function(r,o) {\r",
                    "    console.log('is NOT logged in from viewportafterrender');\r",
                    "    // not logged in so take them to opening page\r",
                    "    tabPanel.setActiveTab(tabPanel.getTabIdByName('AttendeeSpeakerSponsorId'));\r",
                    "    myMask.hide();\r",
                    "} \r",
                    "});  \r",
                    "\r",
                    "// create an array of titles so we can make sure the title the person enters is unique on validation\r",
                    "var store = Ext.data.StoreManager.lookup('SessionTitlesStore');\r",
                    "store.load({\r",
                    "params: {\r",
                    "    option: 'justlowercasetitle',\r",
                    "    param1: '-1',\r",
                    "    param2: '-1',\r",
                    "    param3: '-1'\r",
                    "},\r",
                    "callback: function(records,operation,success) {\r",
                    "    console.log('lowercase titles found: ' + records.length);\r",
                    "}\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ],
                "name": "afterrender",
                "scope": "me",
                "designer|targetType": "Ext.container.Viewport",
                "designer|controlQuery": "viewport > panel"
            },
            "designerId": "40341779-f117-4a88-83b2-6a4a994ae805"
        }
    ]
}