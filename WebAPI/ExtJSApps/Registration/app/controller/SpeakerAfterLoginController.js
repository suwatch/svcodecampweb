/*
 * File: app/controller/SpeakerAfterLoginController.js
 *
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RegistrationApp.controller.SpeakerAfterLoginController', {
    extend: 'Ext.app.Controller',

    onContinueButtonIdClick: function(button, e, eOpts) {
        var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Updating..."});
        myMask.show();

        var tabPanel = Ext.ComponentQuery.query('tabWizardPanelAlias')[0];
        var thisPanel = Ext.getCmp("speakerAfterLoginProfileId");
        var attendeesId = parseInt(thisPanel.getForm().getValues().attendeesId);

        Ext.Ajax.request({ 
            url:'/rpc/Account/CheckPictureExists', 
            actionMethods:'POST', 
            scope:this, 
            params: {
                id: attendeesId  
            },
            success: function(r, o) {  

                // picture exists so now check for valid form
                if (thisPanel.getForm().isValid()) {
                    Ext.Ajax.request({ 
                        url:'/rpc/Account/UpdateSpeaker', 
                        actionMethods:'POST', 
                        scope:this, 
                        params: thisPanel.getForm().getValues(),
                        success: function(r, o) {
                            myMask.hide();
                            tabPanel.setActiveTab(tabPanel.getTabIdByName('SpeakerSessionUpdate'));
                        },
                        failure: function(r,o) {
                            myMask.hide();
                            Ext.Msg.alert("Speaker Update Failed");
                        } 
                    });
                } else {
                    myMask.hide();         
                    Ext.Msg.alert("Form with Speaker Info is not valid.  Required fields include short size, first, last, city, state, zip, bio, etc.");
                }  
            },
            failure: function(r,o) {
                myMask.hide();
                Ext.Msg.alert("No picture assigned.  Because you indicated you are a speaker or already have sessions associated with your login, you need to assign a picture at the bottom of this page.");      
            } 
        });
    },

    onLogoutButtonIdClick: function(button, e, eOpts) {
        var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Logging Out..."});
        myMask.show();

        Ext.Ajax.request({ 
            url:'/rpc/Account/LogOut', 
            actionMethods:'POST', 
            scope:this, 
            params:{
                Username: '',
                Password: '',
                RememberMe: true
            },
            success: function(r, o) { 
                var tabPanel = Ext.ComponentQuery.query('tabWizardPanelAlias')[0];
                tabPanel.setActiveTab(tabPanel.getTabIdByName('attendeeorspeaker'));
                console.log('setting tab to attendeeorspeaker  logout succeeded');
                myMask.hide();
            },
            failure: function(r,o) {
                var tabPanel = Ext.ComponentQuery.query('tabWizardPanelAlias')[0];
                tabPanel.setActiveTab(tabPanel.getTabIdByName('attendeeorspeaker'));
                console.log('setting tab to attendeeorspeaker. logout failed');
                myMask.hide();
            } 

        });
    },

    init: function(application) {
        this.control({
            "SpeakerAfterLoginAlias2 #continueButtonId": {
                click: this.onContinueButtonIdClick
            },
            "SpeakerAfterLoginAlias2 #logoutButtonId": {
                click: this.onLogoutButtonIdClick
            }
        });
    }

});
