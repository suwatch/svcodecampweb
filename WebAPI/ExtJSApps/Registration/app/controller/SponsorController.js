/*
 * File: app/controller/SponsorController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RegistrationApp.controller.SponsorController', {
    extend: 'Ext.app.Controller',

    onContinueButtonIdClick: function(button, e, options) {
        var form =  Ext.ComponentQuery.query('sponsorAlias')[0].getForm();
        form.submit();




        /*
        var continuebutton;

        console.log('continue button in sponsor page');

        continueButton = Ext.ComponentQuery.query('sponsorAlias #continueButtonId')[0];
        continueButton.enable();



        var username = Ext.ComponentQuery.query('ForgotUsernameAlias #username')[0].getValue();
        var email = Ext.ComponentQuery.query('ForgotUsernameAlias #email')[0].getValue();

        console.log('username: ' + username + ' email: ' + email);

        if (username.length > 0 || email.length > 0) {
        continueButton = Ext.ComponentQuery.query('ForgotUsernameAlias #continueButtonId')[0];
        if (continueButton.isDisabled()) {
        continueButton.enable();
        }
        } else {
        continueButton = Ext.ComponentQuery.query('ForgotUsernameAlias #continueButtonId')[0];
        if (!continueButton.isDisabled()) {
        continueButton.disable();
        }
        }

        var continueEnabledNow = !continueButton.isDisabled();

        //console.log('continueEnabled: ' + continueEnabledNow);

        return continueEnabledNow;
        */

    },

    onBackButtonIdClick: function(button, e, options) {
        var tabWizardPanel = Ext.getCmp('TabWizardId')
        tabWizardPanel.setActiveTab(tabWizardPanel.getTabIdByName('AttendeeSpeakerSponsorId'));

    },

    onNameChange: function(field, newValue, oldValue, options) {
        this.continueButtonCheck();
    },

    continueButtonCheck: function() {
        // check for if form is valid, and if so enable continue button.

        var continueButton = Ext.ComponentQuery.query('sponsorAlias #continueButtonId')[0];
        var form =  Ext.ComponentQuery.query('sponsorAlias')[0].getForm();

        //debugger;

        if (form.isValid()) {
            if (continueButton.isDisabled()) {
                continueButton.enable();
            }
        } else {
            if (!continueButton.isDisabled()) {
                continueButton.enable();
            }
        }








        /*
        var continuebutton;
        var name = Ext.ComponentQuery.query('sponsorAlias #name')[0].getValue();
        var email = Ext.ComponentQuery.query('sponsorAlias #email')[0].getValue();

        console.log('name: ' + name + ' email: ' + email);

        if (name.length > 0 && email.length > 0) {
        continueButton = Ext.ComponentQuery.query('sponsorAlias #continueButtonId')[0];
        if (continueButton.isDisabled()) {
        continueButton.enable();
        }
        } else {
        continueButton = Ext.ComponentQuery.query('sponsorAlias #continueButtonId')[0];
        if (!continueButton.isDisabled()) {
        continueButton.disable();
        }
        }

        return;
        */

    },

    init: function(application) {
        this.control({
            "sponsorAlias #continueButtonId": {
                click: this.onContinueButtonIdClick
            },
            "sponsorAlias #backButtonId": {
                click: this.onBackButtonIdClick
            },
            "#name": {
                change: this.onNameChange
            }
        });
    }

});
