/*
 * File: app/view/SpeakerSessionUpdate.js
 *
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RegistrationApp.view.SpeakerSessionUpdate', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.SpeakerSessionUpdateAlias',

    layout: {
        type: 'border'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    itemId: 'ToolBarAttendeeSpeaker',
                    layout: {
                        pack: 'end',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'speakerSessionsBackButtonItemId',
                            iconAlign: 'right',
                            text: 'Back'
                        },
                        {
                            xtype: 'tbseparator'
                        },
                        {
                            xtype: 'button',
                            itemId: 'continueButtonId',
                            iconAlign: 'right',
                            text: 'Continue'
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'gridpanel',
                    flex: 2,
                    region: 'north',
                    split: true,
                    height: 200,
                    id: 'sessionsBySpeakerGridPanelId',
                    padding: 5,
                    autoScroll: true,
                    animCollapse: true,
                    collapseDirection: 'top',
                    collapsible: false,
                    store: 'SessionStore',
                    viewConfig: {
                        border: 1
                    },
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'title',
                            text: 'Title',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 50,
                            dataIndex: 'id',
                            text: 'Id'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 50,
                            dataIndex: 'attendeeId',
                            text: 'attendeesId'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 50,
                            dataIndex: 'sessionId',
                            text: 'sessionsId'
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'button',
                                    id: 'editSelectedSessionButtonId',
                                    text: 'Edit Selected Session'
                                },
                                {
                                    xtype: 'button',
                                    id: 'AddNewSessionButtonId',
                                    text: 'Add New Session'
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'AddNewSessionItemIdButton',
                                    text: 'MyButton',
                                    listeners: {
                                        click: {
                                            fn: me.onAddNewSessionItemIdButtonClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    listeners: {
                        selectionchange: {
                            fn: me.onSessionsBySpeakerGridPanelIdSelectionChange,
                            scope: me
                        },
                        afterrender: {
                            fn: me.onSessionsBySpeakerGridPanelIdAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'panel',
                    flex: 7,
                    region: 'center',
                    disabled: true,
                    id: 'sessionDetailPanelId',
                    layout: {
                        type: 'border'
                    },
                    items: [
                        {
                            xtype: 'form',
                            flex: 5,
                            region: 'west',
                            split: true,
                            id: 'sessionFormPanelEditorId',
                            itemId: 'sessionFormPanelEditorItemId',
                            width: 150,
                            autoScroll: true,
                            bodyPadding: 10,
                            items: [
                                {
                                    xtype: 'fieldset',
                                    formBind: true,
                                    itemId: 'FieldSetSessionEditorItemId',
                                    title: 'Basic Session Information',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            width: 150,
                                            fieldLabel: 'Title',
                                            name: 'title'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            width: 150,
                                            fieldLabel: 'Hash Tags For Twitter',
                                            name: 'twitterHashTags'
                                        },
                                        {
                                            xtype: 'combobox',
                                            anchor: '100%',
                                            fieldLabel: 'Session Level',
                                            name: 'sessionLevel',
                                            displayField: 'description',
                                            store: 'SessionLevelStore',
                                            valueField: 'id'
                                        },
                                        {
                                            xtype: 'textareafield',
                                            anchor: '100%',
                                            height: 100,
                                            fieldLabel: 'Session Description (just text, no html please)',
                                            name: 'description'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            fieldLabel: 'sessionId',
                                            name: 'sessionId'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            fieldLabel: 'attendeesId',
                                            name: 'id'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            flex: 2,
                            region: 'center',
                            id: 'SessionTagsGridPanelId',
                            autoScroll: true,
                            title: 'Session Tags For Selected Session',
                            store: 'TagStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    width: 160,
                                    dataIndex: 'tagName',
                                    text: 'TagName',
                                    flex: 1
                                },
                                {
                                    xtype: 'booleancolumn',
                                    width: 60,
                                    dataIndex: 'taggedInSession',
                                    text: 'Tagged'
                                }
                            ],
                            selModel: Ext.create('Ext.selection.CheckboxModel', {
                                listeners: {
                                    selectionchange: {
                                        fn: me.onCheckboxselectionmodelSelectionChange,
                                        scope: me
                                    }
                                }
                            })
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onAddNewSessionItemIdButtonClick: function(button, e, eOpts) {
        var sessionsSpeakerPanel = Ext.getCmp("sessionsBySpeakerGridPanelId");
        var store = sessionsSpeakerPanel.getStore();
        var newRecord = Ext.create('RegistrationApp.model.Session',{
            title: 'my title',
            description: 'my descr'
        });
        store.add(newRecord);

        //debugger;

        Ext.create('RegistrationApp.view.WindowSession',{
        }).show();
    },

    onSessionsBySpeakerGridPanelIdSelectionChange: function(model, selected, eOpts) {
        debugger;


        var sessionDetailPanel = Ext.getCmp('sessionDetailPanelId');
        sessionDetailPanel.setDisabled(false);

        var panelForm = Ext.getCmp('sessionFormPanelEditorId').getForm();
        panelForm.setValues(selected[0].getData());



        /*debugger;
        var panel = Ext.getCmp('sessionFormPanelEditorId');

        var panelCount = panel.getStore().getCount() 
        if (panelCount == 0) {

        } else {

        panel.getForm().setValues(selected[0].getData());

        }
        */


    },

    onSessionsBySpeakerGridPanelIdAfterRender: function(component, eOpts) {
        var panelForm = Ext.getCmp('sessionFormPanelEditorId');
        var panelGrid = Ext.getCmp('sessionsBySpeakerGridPanelId');
        var sessionDetailPanel = Ext.getCmp('sessionDetailPanelId');

        debugger;
        var panelCount = panelGrid.getStore().getCount() 
        if (panelCount == 0) {

        } else {
            //sessionDetailPanel.disabled = false;
            //panelGrid.getSelectionModel().selectFirstRow();


            //panel.getForm().setValues(selected[0].getData());

        }

    },

    onCheckboxselectionmodelSelectionChange: function(model, selected, eOpts) {
        // all records that are selected are passed in here.  we need to run through the store
        // itself and verify that is what we think we should have.
        var tagsSelected1 = [];
        Ext.each(selected,function(rec) {
            tagsSelected1.push(rec.getData().tagName); 
        });


        // find record in store and update it
        var tagList = Ext.getCmp("SessionTagsGridPanelId");
        var tagListStore = tagList.store;

        tagListStore.each(function(storeRec) {
            var storeRecTagName = storeRec.getData().tagName;
            var storeRecTaggedInSession = storeRec.getData().taggedInSession;
            var gridPanelTagged = Ext.Array.contains(tagsSelected1,storeRecTagName);

            if (storeRecTaggedInSession != gridPanelTagged) {
                storeRec.set("taggedInSession",gridPanelTagged);
            }
        });

    }

});