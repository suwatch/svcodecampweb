/*
 * File: app/view/SpeakerSessionUpdate.js
 *
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RegistrationApp.view.SpeakerSessionUpdate', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.SpeakerSessionUpdateAlias',

    layout: {
        type: 'border'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    itemId: 'ToolBarAttendeeSpeaker',
                    layout: {
                        pack: 'end',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            id: 'sessionButtonSaveChangesId',
                            text: 'Save Changes',
                            listeners: {
                                click: {
                                    fn: me.onSessionButtonSaveChangesIdClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'sessionButtonAddNewId',
                            text: 'Add New Session',
                            listeners: {
                                click: {
                                    fn: me.onSessionButtonAddNewIdClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'SessionButtonDelete',
                            text: 'Delete Session',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            itemId: 'speakerSessionsBackButtonItemId',
                            iconAlign: 'right',
                            text: 'Back'
                        },
                        {
                            xtype: 'tbseparator'
                        },
                        {
                            xtype: 'button',
                            itemId: 'continueButtonId',
                            iconAlign: 'right',
                            text: 'Continue'
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'gridpanel',
                    flex: 2,
                    region: 'north',
                    split: true,
                    id: 'sessionsBySpeakerGridPanelId',
                    padding: 5,
                    autoScroll: true,
                    animCollapse: true,
                    collapseDirection: 'top',
                    collapsible: false,
                    store: 'SessionStore',
                    viewConfig: {
                        border: 1
                    },
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'title',
                            text: 'Session Title',
                            flex: 1
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            width: 50,
                            dataIndex: 'id',
                            text: 'Id'
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            width: 50,
                            dataIndex: 'attendeeId',
                            text: 'attendeesId'
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            width: 50,
                            dataIndex: 'sessionId',
                            text: 'sessionsId'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (value == true) {
                                    return 'approved';
                                } else {
                                    return 'pending approval';
                                }

                            },
                            width: 50,
                            defaultWidth: 200,
                            dataIndex: 'approved'
                        }
                    ],
                    listeners: {
                        selectionchange: {
                            fn: me.onSessionsBySpeakerGridPanelIdSelectionChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'panel',
                    flex: 7,
                    region: 'center',
                    disabled: true,
                    id: 'sessionDetailPanelId',
                    layout: {
                        type: 'border'
                    },
                    items: [
                        {
                            xtype: 'form',
                            flex: 5,
                            region: 'west',
                            split: true,
                            id: 'sessionFormPanelEditorId',
                            itemId: 'sessionFormPanelEditorItemId',
                            width: 150,
                            autoScroll: true,
                            bodyPadding: 10,
                            items: [
                                {
                                    xtype: 'fieldset',
                                    formBind: true,
                                    itemId: 'FieldSetSessionEditorItemId',
                                    title: 'Basic Session Information',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            width: 150,
                                            fieldLabel: 'Title',
                                            name: 'title'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            width: 150,
                                            fieldLabel: 'Hash Tags For Twitter',
                                            name: 'twitterHashTags'
                                        },
                                        {
                                            xtype: 'textareafield',
                                            anchor: '100%',
                                            height: 100,
                                            fieldLabel: 'Session Description (just text, no html please)',
                                            name: 'description'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            fieldLabel: 'Session Level (Beginner, Intermediate or Advanced)',
                                            name: 'sessionLevel'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            hidden: true,
                                            fieldLabel: 'sessionId',
                                            name: 'sessionId'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            hidden: true,
                                            fieldLabel: 'attendeesId',
                                            name: 'id'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            flex: 2,
                            region: 'center',
                            id: 'SessionTagsGridPanelId',
                            autoScroll: true,
                            title: 'Session Tags For Selected Session',
                            store: 'TagStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    width: 160,
                                    dataIndex: 'tagName',
                                    text: 'TagName',
                                    flex: 1
                                },
                                {
                                    xtype: 'booleancolumn',
                                    hidden: true,
                                    width: 60,
                                    dataIndex: 'taggedInSession',
                                    text: 'Tagged'
                                }
                            ],
                            selModel: Ext.create('Ext.selection.CheckboxModel', {
                                listeners: {
                                    selectionchange: {
                                        fn: me.onCheckboxselectionmodelSelectionChange,
                                        scope: me
                                    }
                                }
                            })
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onSessionButtonSaveChangesIdClick: function(button, e, eOpts) {

        var formPanel = Ext.getCmp("sessionFormPanelEditorId").getForm();
        var sessionGridPanel = Ext.getCmp("sessionsBySpeakerGridPanelId");

        formPanel.updateRecord();
        var modelRecord = formPanel.getRecord();

        var store = sessionGridPanel.getStore();
        var sessionId = modelRecord.getId()
        var index = store.findExact("id", parseInt(sessionId));

        var modelRecordFromGrid = store.getAt(index);

        modelRecordFromGrid.set("title",modelRecord.getData().title);
        modelRecordFromGrid.set("description",modelRecord.getData().description);
        modelRecordFromGrid.set("sessionLevel",modelRecord.getData().sessionLevel);
        modelRecordFromGrid.set("twitterHashTags",modelRecord.getData().twitterHashTags);
        modelRecordFromGrid.set("description",modelRecord.getData().description);

        store.sync();

        var tagList = Ext.getCmp("SessionTagsGridPanelId");
        var tagListStore = tagList.store;
        tagListStore.save();













    },

    onSessionButtonAddNewIdClick: function(button, e, eOpts) {
        /*

        var attendeesId = Ext.getCmp('speakerAfterLoginProfileId').getForm().getValues().attendeesId;

        Ext.Ajax.request({ 
        url:'/rest/Session', 
        actionMethods:'GET', 
        scope:this, 
        params:{
        option: 'submitsessioncheck',
        param1: parseInt(attendeesId)
        },
        success: function(r, o) { 
        debugger;
        },
        failure: function(r,o) {
        debugger;
        } 
        });  


        debugger;

        */
        var attendeesId = Ext.getCmp('speakerAfterLoginProfileId').getForm().getValues().attendeesId;

        var newSessionRecord = Ext.create('RegistrationApp.model.Session',{
            title: 'New Session, Update Your Title and other Session Info.',
            description: 'Description Required Here',
            loggedInUserAttendeeId: parseInt(attendeesId)
        });
        newSessionRecord.save({
            success: function(record,operation) {
                //debugger;

                var newSessionPresenterRecord = Ext.create('RegistrationApp.model.SessionPresenterModel',{
                    attendeeId: parseInt(attendeesId),
                    sessionId: record.getData().id
                });
                //debugger;
                newSessionPresenterRecord.save({
                    success: function(record) {
                        var sessionsBySpeakerStore = Ext.getCmp("sessionsBySpeakerGridPanelId").getStore();
                        //debugger;
                        sessionsBySpeakerStore.load({
                            params: {
                                option: 'byspeaker',
                                param1: attendeesId,
                                param2: '-1',
                                param3: '-1'
                            },
                            callback: function(records,operation,success) {
                                //debugger;
                            }
                        });
                    },
                    failure: function(records,operation,success) {
                        //debugger;
                        var message = operation.getError(); // this does not work
                        Ext.Msg.alert("Session adding restricted.   Either over limit or sessions closed");
                    },
                });
            },
            failure: function(rec) {
                Ext.Msg.alert("Session adding restricted.   Either over limit or sessions closed.");
            }
        });

















    },

    onButtonClick: function(button, e, eOpts) {
        var sessionGridPanel = Ext.getCmp("sessionsBySpeakerGridPanelId");
        var sessionsBySpeakerStore = Ext.getCmp("sessionsBySpeakerGridPanelId").getStore();

        var sm = sessionGridPanel.getSelectionModel();
        if (sm.getCount() === 0) {
            Ext.Msg.alert("Must select a session first"); 
        } else {

            Ext.Msg.confirm('Delete Selected Session?', 'Are you sure you want to delete the selected session?', function (id, value) {

                if (id === 'yes') {
                    var recordModel = sm.getSelection();
                    sessionsBySpeakerStore.remove(recordModel);
                    sessionsBySpeakerStore.sync({
                        success: function(){

                            var sessionDetailPanel = Ext.getCmp('sessionDetailPanelId');
                            sessionDetailPanel.setDisabled(true);

                            var attendeesId = Ext.getCmp('speakerAfterLoginProfileId').getForm().getValues().attendeesId;

                            sessionsBySpeakerStore.load({
                                params: {
                                    option: 'byspeaker',
                                    param1: attendeesId,
                                    param2: '-1',
                                    param3: '-1'
                                },
                                success: function(records,operation,success) {

                                    // now sure why this does not fire.

                                },
                                failure: function(records,operation,success) {
                                    Ext.Msg.alert("Failure Retrieving Sessions/Speaker Info",success); 
                                }
                            });
                        },
                        failure: function(rec){
                            debugger;
                            Ext.Msg.alert("Error Removing Session Info",rec); 
                        },
                        scope: this
                    });



                }
            }, this);  


        }
    },

    onSessionsBySpeakerGridPanelIdSelectionChange: function(model, selected, eOpts) {
        if (selected.length > 0) {  // on delete, this fires and then there is nothing selected
            var sessionData = selected[0].getData();

            // get handle to bottom window containing form and tags to enable
            var sessionDetailPanel = Ext.getCmp('sessionDetailPanelId');
            sessionDetailPanel.setDisabled(false);


            // fill data into form for session info
            var panelForm = Ext.getCmp('sessionFormPanelEditorId').getForm();

            var myRec = Ext.create("RegistrationApp.model.Session",sessionData);
            panelForm.loadRecord(myRec);


            //panelForm.setValues(sessionData);

            // fill data in for tags
            var tagList = Ext.getCmp("SessionTagsGridPanelId");
            var tagListStore = tagList.store;
            tagListStore.load({
                params: {
                    sessionId: sessionData.id
                },
                callback: function(records,operation,success) {
                    // get selection model of grid
                    var sm = tagList.getSelectionModel();
                    var recs = [];
                    Ext.each(records,function(rec) {
                        if (rec.get("taggedInSession") === true) {
                            recs.push(rec);
                        }
                    });
                    sm.select(recs);



                    tagList.getView().scrollBy(0, -10000);

                    //tagList.scrollBy(0, -10000);
                    // sm.select(0);


                }
            });
        }





    },

    onCheckboxselectionmodelSelectionChange: function(model, selected, eOpts) {
        // all records that are selected are passed in here.  we need to run through the store
        // itself and verify that is what we think we should have.
        var tagsSelected1 = [];
        Ext.each(selected,function(rec) {
            tagsSelected1.push(rec.getData().tagName); 
        });


        // find record in store and update it
        var tagList = Ext.getCmp("SessionTagsGridPanelId");
        var tagListStore = tagList.store;

        tagListStore.each(function(storeRec) {
            var storeRecTagName = storeRec.getData().tagName;
            var storeRecTaggedInSession = storeRec.getData().taggedInSession;
            var gridPanelTagged = Ext.Array.contains(tagsSelected1,storeRecTagName);

            if (storeRecTaggedInSession != gridPanelTagged) {
                storeRec.set("taggedInSession",gridPanelTagged);
            }
        });

    }

});