/*
 * File: app/controller/SpeakerSessionUpdateController.js
 *
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RegistrationApp.controller.SpeakerSessionUpdateController', {
    extend: 'Ext.app.Controller',

    onContinueButtonIdClick: function(button, e, eOpts) {
        var moveOn = this.saveSessions();
        if (moveOn === true) {
            var tabPanel = Ext.ComponentQuery.query('tabWizardPanelAlias')[0];
            tabPanel.setActiveTab(tabPanel.getTabIdByName('optIn'));
        }
    },

    onSpeakerSessionsBackButtonItemIdClick: function(button, e, eOpts) {

        var moveOn = this.saveSessions();

        if (moveOn === true) {
            var tabWizardPanel = Ext.getCmp('TabWizardId');
            tabWizardPanel.setActiveTab(Ext.getCmp('TabWizardId').getTabIdByName('SpeakerAfterLogin'));
        }

    },

    onSessionButtonDeleteClick: function(button, e, eOpts) {
        var sessionGridPanel = Ext.getCmp("sessionsBySpeakerGridPanelId");
        var sessionsBySpeakerStore = Ext.getCmp("sessionsBySpeakerGridPanelId").getStore();

        var sm = sessionGridPanel.getSelectionModel();
        if (sm.getCount() === 0) {
            Ext.Msg.alert("Must select a session first"); 
        } else {

            Ext.Msg.confirm('Delete Selected Session?', 'Are you sure you want to delete the selected session?', function (id, value) {

                if (id === 'yes') {
                    var recordModel = sm.getSelection();
                    sessionsBySpeakerStore.remove(recordModel); // this is really sessionsStore
                    sessionsBySpeakerStore.sync({
                        success: function(){

                            var sessionDetailPanel = Ext.getCmp('sessionDetailPanelId');
                            sessionDetailPanel.setDisabled(true);

                            var attendeesId = Ext.getCmp('speakerAfterLoginProfileId').getForm().getValues().attendeesId;

                            sessionsBySpeakerStore.load({
                                params: {
                                    option: 'byspeaker',
                                    param1: attendeesId,
                                    param2: '-1',
                                    param3: '-1'
                                },
                                success: function(records,operation,success) {

                                    // now sure why this does not fire.

                                },
                                failure: function(records,operation,success) {
                                    Ext.Msg.alert("Failure Retrieving Sessions/Speaker Info",success); 
                                }
                            });
                        },
                        failure: function(rec){
                            Ext.Msg.alert("Error Removing Session Info",rec); 
                        },
                        scope: this
                    });
                }
            }, this);  


        }
    },

    onSessionButtonAddNewIdClick: function(button, e, eOpts) {
        var attendeesId = Ext.getCmp('speakerAfterLoginProfileId').getForm().getValues().attendeesId;

        var newSessionRecord = Ext.create('RegistrationApp.model.Session',{
            title: '(' + (new Date()).getTime() + ')' + ' Unique New Session Title (UPDATE).',
            description: '(Enter the description of your session here)',
            loggedInUserAttendeeId: parseInt(attendeesId)
        });
        newSessionRecord.save({
            success: function(record,operation) {
                //debugger;

                var newSessionPresenterRecord = Ext.create('RegistrationApp.model.SessionPresenterModel',{
                    attendeeId: parseInt(attendeesId),
                    sessionId: record.getData().id
                });
                //debugger;
                newSessionPresenterRecord.save({
                    success: function(record) {
                        var sessionsBySpeakerStore = Ext.getCmp("sessionsBySpeakerGridPanelId").getStore();
                        //debugger;
                        sessionsBySpeakerStore.load({
                            params: {
                                option: 'byspeaker',
                                param1: attendeesId,
                                param2: '-1',
                                param3: '-1'
                            },
                            callback: function(records,operation,success) {
                                //debugger;
                            }
                        });
                    },
                    failure: function(records,operation,success) {
                        //debugger;
                        var message = operation.getError(); // this does not work
                        Ext.Msg.alert("Session adding restricted.   Either over limit or sessions closed");
                    }
                });
            },
            failure: function(rec) {
                Ext.Msg.alert("Session adding restricted.   Either over limit or sessions closed.");
            }
        });

















    },

    onSessionButtonSaveChangesIdClick: function(button, e, eOpts) {
        this.saveSessions();
    },

    saveSessions: function() {
        var formPanel = Ext.getCmp("sessionFormPanelEditorId").getForm();
        var sessionGridPanel = Ext.getCmp("sessionsBySpeakerGridPanelId");

        formPanel.updateRecord();
        var modelRecord = formPanel.getRecord();


        var value = modelRecord.get('title');
        var notFound = true;
        var store = Ext.data.StoreManager.lookup('SessionTitlesStore');
        var titleNoTrim = Ext.util.Format.lowercase(value);
        var title = Ext.util.Format.trim(titleNoTrim);

        store.each(function(rec) {
            // need to not check against line we are on

            if (rec.get('title') === title) {
                notFound = false;
            }
        });

        if (notFound) {
            var store = sessionGridPanel.getStore();
            var sessionId = modelRecord.getId();
            var index1 = store.findExact("id", parseInt(sessionId));

            var modelRecordFromGrid = store.getAt(index1);

            modelRecordFromGrid.set("title",modelRecord.getData().title);
            modelRecordFromGrid.set("description",modelRecord.getData().description);
            modelRecordFromGrid.set("sessionLevel",modelRecord.getData().sessionLevel);
            modelRecordFromGrid.set("twitterHashTags",modelRecord.getData().twitterHashTags);
            modelRecordFromGrid.set("description",modelRecord.getData().description);

            store.sync();

            var tagList = Ext.getCmp("SessionTagsGridPanelId");
            var tagListStore = tagList.store;
            tagListStore.save();
            return true;
        } else {
            Ext.Msg.alert("Session Title Problem","Another session has been entered with the same title.  Please make your title unique while keeping it under 75 characters");
        }

    },

    init: function(application) {
        this.control({
            "SpeakerSessionUpdateAlias #continueButtonId": {
                click: this.onContinueButtonIdClick
            },
            "#speakerSessionsBackButtonItemId": {
                click: this.onSpeakerSessionsBackButtonItemIdClick
            },
            "#SessionButtonDelete": {
                click: this.onSessionButtonDeleteClick
            },
            "#sessionButtonAddNewId": {
                click: this.onSessionButtonAddNewIdClick
            },
            "#sessionButtonSaveChangesId": {
                click: this.onSessionButtonSaveChangesIdClick
            }
        });
    }

});
