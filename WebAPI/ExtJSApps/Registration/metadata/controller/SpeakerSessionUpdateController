{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "SpeakerSessionUpdateController"
    },
    "designerId": "478a9dd3-a843-49b5-b02e-1e5e4d2fc6d1",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onContinueButtonIdClick",
                "fn": "onContinueButtonIdClick",
                "implHandler": [
                    "var moveOn = this.saveSessions();\r",
                    "if (moveOn === true) {\r",
                    "    var tabPanel = Ext.ComponentQuery.query('tabWizardPanelAlias')[0];\r",
                    "    tabPanel.setActiveTab(tabPanel.getTabIdByName('optIn'));\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "SpeakerSessionUpdateAlias #continueButtonId"
            },
            "designerId": "d8f3c9dd-5306-4b18-ab9f-a121d2cb6766"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onSpeakerSessionsBackButtonItemIdClick",
                "fn": "onSpeakerSessionsBackButtonItemIdClick",
                "implHandler": [
                    "\r",
                    "var moveOn = this.saveSessions();\r",
                    "\r",
                    "if (moveOn === true) {\r",
                    "    var tabWizardPanel = Ext.getCmp('TabWizardId');\r",
                    "    tabWizardPanel.setActiveTab(Ext.getCmp('TabWizardId').getTabIdByName('SpeakerAfterLogin'));\r",
                    "}\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#speakerSessionsBackButtonItemId"
            },
            "designerId": "e5fa2c98-a02c-461c-b7f8-093d4e57d63a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onSessionButtonDeleteClick",
                "fn": "onSessionButtonDeleteClick",
                "implHandler": [
                    "var sessionGridPanel = Ext.getCmp(\"sessionsBySpeakerGridPanelId\");\r",
                    "var sessionsBySpeakerStore = Ext.getCmp(\"sessionsBySpeakerGridPanelId\").getStore();\r",
                    "\r",
                    "var sm = sessionGridPanel.getSelectionModel();\r",
                    "if (sm.getCount() === 0) {\r",
                    "    Ext.Msg.alert(\"Must select a session first\"); \r",
                    "} else {\r",
                    "\r",
                    "    Ext.Msg.confirm('Delete Selected Session?', 'Are you sure you want to delete the selected session?', function (id, value) {\r",
                    "\r",
                    "        if (id === 'yes') {\r",
                    "            var recordModel = sm.getSelection();\r",
                    "            sessionsBySpeakerStore.remove(recordModel); // this is really sessionsStore\r",
                    "            sessionsBySpeakerStore.sync({\r",
                    "                success: function(){\r",
                    "\r",
                    "                    var sessionDetailPanel = Ext.getCmp('sessionDetailPanelId');\r",
                    "                    sessionDetailPanel.setDisabled(true);\r",
                    "\r",
                    "                    var attendeesId = Ext.getCmp('speakerAfterLoginProfileId').getForm().getValues().attendeesId;\r",
                    "\r",
                    "                    sessionsBySpeakerStore.load({\r",
                    "                        params: {\r",
                    "                            option: 'byspeaker',\r",
                    "                            param1: attendeesId,\r",
                    "                            param2: '-1',\r",
                    "                            param3: '-1'\r",
                    "                        },\r",
                    "                        success: function(records,operation,success) {\r",
                    "\r",
                    "                            // now sure why this does not fire.\r",
                    "\r",
                    "                        },\r",
                    "                        failure: function(records,operation,success) {\r",
                    "                            Ext.Msg.alert(\"Failure Retrieving Sessions/Speaker Info\",success); \r",
                    "                        }\r",
                    "                    });\r",
                    "                },\r",
                    "                failure: function(rec){\r",
                    "                    Ext.Msg.alert(\"Error Removing Session Info\",rec); \r",
                    "                },\r",
                    "                scope: this\r",
                    "            });\r",
                    "        }\r",
                    "    }, this);  \r",
                    "\r",
                    "\r",
                    "}"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#SessionButtonDelete"
            },
            "designerId": "c7faa466-77f8-4c94-b850-2f841002223e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onSessionButtonAddNewIdClick",
                "fn": "onSessionButtonAddNewIdClick",
                "implHandler": [
                    "var attendeesId = Ext.getCmp('speakerAfterLoginProfileId').getForm().getValues().attendeesId;\r",
                    "\r",
                    "var newSessionRecord = Ext.create('RegistrationApp.model.Session',{\r",
                    "    title: '(' + (new Date()).getTime() + ')' + ' Unique New Session Title (UPDATE).',\r",
                    "    description: '(Enter the description of your session here)',\r",
                    "    loggedInUserAttendeeId: parseInt(attendeesId)\r",
                    "});\r",
                    "newSessionRecord.save({\r",
                    "    success: function(record,operation) {\r",
                    "        //debugger;\r",
                    "\r",
                    "        var newSessionPresenterRecord = Ext.create('RegistrationApp.model.SessionPresenterModel',{\r",
                    "            attendeeId: parseInt(attendeesId),\r",
                    "            sessionId: record.getData().id\r",
                    "        });\r",
                    "        //debugger;\r",
                    "        newSessionPresenterRecord.save({\r",
                    "            success: function(record) {\r",
                    "                var sessionsBySpeakerStore = Ext.getCmp(\"sessionsBySpeakerGridPanelId\").getStore();\r",
                    "                //debugger;\r",
                    "                sessionsBySpeakerStore.load({\r",
                    "                    params: {\r",
                    "                        option: 'byspeaker',\r",
                    "                        param1: attendeesId,\r",
                    "                        param2: '-1',\r",
                    "                        param3: '-1'\r",
                    "                    },\r",
                    "                    callback: function(records,operation,success) {\r",
                    "                        //debugger;\r",
                    "                    }\r",
                    "                });\r",
                    "            },\r",
                    "            failure: function(records,operation,success) {\r",
                    "                //debugger;\r",
                    "                var message = operation.getError(); // this does not work\r",
                    "                Ext.Msg.alert(\"Session adding restricted.   Either over limit or sessions closed\");\r",
                    "            }\r",
                    "        });\r",
                    "    },\r",
                    "    failure: function(rec) {\r",
                    "        Ext.Msg.alert(\"Session adding restricted.   Either over limit or sessions closed.\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#sessionButtonAddNewId"
            },
            "designerId": "252ff751-fac9-4e50-bc48-be7622b0d070"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "onSessionButtonSaveChangesIdClick",
                "fn": "onSessionButtonSaveChangesIdClick",
                "implHandler": [
                    "this.saveSessions();"
                ],
                "name": "click",
                "scope": "me",
                "designer|targetType": "Ext.button.Button",
                "designer|controlQuery": "#sessionButtonSaveChangesId"
            },
            "designerId": "9349d278-c119-4f69-b512-1d36ce4a31bc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "saveSessions",
                "fn": "saveSessions",
                "implHandler": [
                    "var formPanel = Ext.getCmp(\"sessionFormPanelEditorId\").getForm();\r",
                    "var sessionGridPanel = Ext.getCmp(\"sessionsBySpeakerGridPanelId\");\r",
                    "\r",
                    "formPanel.updateRecord();\r",
                    "var modelRecord = formPanel.getRecord();\r",
                    "\r",
                    "\r",
                    "var value = modelRecord.get('title');\r",
                    "var notFound = true;\r",
                    "var store = Ext.data.StoreManager.lookup('SessionTitlesStore');\r",
                    "var titleNoTrim = Ext.util.Format.lowercase(value);\r",
                    "var title = Ext.util.Format.trim(titleNoTrim);\r",
                    "\r",
                    "store.each(function(rec) {\r",
                    "    // need to not check against line we are on\r",
                    "    \r",
                    "    if (rec.get('title') === title) {\r",
                    "        notFound = false;\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "if (notFound) {\r",
                    "    var store = sessionGridPanel.getStore();\r",
                    "    var sessionId = modelRecord.getId();\r",
                    "    var index1 = store.findExact(\"id\", parseInt(sessionId));\r",
                    "    \r",
                    "    var modelRecordFromGrid = store.getAt(index1);\r",
                    "    \r",
                    "    modelRecordFromGrid.set(\"title\",modelRecord.getData().title);\r",
                    "    modelRecordFromGrid.set(\"description\",modelRecord.getData().description);\r",
                    "    modelRecordFromGrid.set(\"sessionLevel\",modelRecord.getData().sessionLevel);\r",
                    "    modelRecordFromGrid.set(\"twitterHashTags\",modelRecord.getData().twitterHashTags);\r",
                    "    modelRecordFromGrid.set(\"description\",modelRecord.getData().description);\r",
                    "    \r",
                    "    store.sync();\r",
                    "    \r",
                    "    var tagList = Ext.getCmp(\"SessionTagsGridPanelId\");\r",
                    "    var tagListStore = tagList.store;\r",
                    "    tagListStore.save();\r",
                    "    return true;\r",
                    "} else {\r",
                    " \tExt.Msg.alert(\"Session Title Problem\",\"Another session has been entered with the same title.  Please make your title unique while keeping it under 75 characters\");\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "35a7516a-f6cf-4c32-aae0-6e82aedc5311"
        }
    ]
}