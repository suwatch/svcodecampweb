/*
 * File: app/view/WindowSession.js
 *
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RegistrationApp.view.WindowSession', {
    extend: 'Ext.window.Window',

    height: 630,
    padding: 5,
    width: 836,
    layout: {
        type: 'fit'
    },
    title: 'Session Editor',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            id: 'WindowSessionSaveButtonId',
                            text: 'Save',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'panel',
                    id: 'SessionEditorPanelId',
                    layout: {
                        type: 'border'
                    },
                    items: [
                        {
                            xtype: 'form',
                            flex: 6,
                            region: 'center',
                            id: 'sessionFormPanelEditorId',
                            bodyPadding: 10,
                            items: [
                                {
                                    xtype: 'fieldset',
                                    itemId: 'FieldSetSessionEditorItemId',
                                    title: 'Basic Session Information',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            width: 150,
                                            fieldLabel: 'Title',
                                            name: 'title'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            width: 150,
                                            fieldLabel: 'Hash Tags For Twitter',
                                            name: 'twitterHashTags'
                                        },
                                        {
                                            xtype: 'combobox',
                                            anchor: '100%',
                                            fieldLabel: 'Session Level',
                                            name: 'sessionLevel',
                                            displayField: 'description',
                                            store: 'SessionLevelStore',
                                            valueField: 'id'
                                        },
                                        {
                                            xtype: 'textareafield',
                                            anchor: '100%',
                                            height: 100,
                                            fieldLabel: 'Session Description (just text, no html please)',
                                            name: 'description'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            fieldLabel: 'sessionId',
                                            name: 'sessionId'
                                        },
                                        {
                                            xtype: 'textfield',
                                            anchor: '100%',
                                            fieldLabel: 'attendeesId',
                                            name: 'id'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            flex: 2,
                            region: 'east',
                            id: 'SessionTagsGridPanelId',
                            width: 150,
                            autoScroll: true,
                            title: 'Session Tags',
                            store: 'TagStore',
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    width: 160,
                                    dataIndex: 'tagName',
                                    text: 'TagName',
                                    flex: 1
                                },
                                {
                                    xtype: 'booleancolumn',
                                    width: 60,
                                    dataIndex: 'taggedInSession',
                                    text: 'Tagged'
                                }
                            ],
                            selModel: Ext.create('Ext.selection.CheckboxModel', {
                                listeners: {
                                    selectionchange: {
                                        fn: me.onCheckboxselectionmodelSelectionChange,
                                        scope: me
                                    }
                                }
                            })
                        }
                    ]
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onWindowAfterRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onButtonClick: function(button, e, eOpts) {
        Ext.getCmp("SessionTagsGridPanelId").getStore().sync();
        var panel = Ext.getCmp("sessionFormPanelEditorId");
        var form = panel.getForm();
        panel.getForm().updateRecord();


        /*



        // the formValues are what I want to use to update my REST store


        var store = Ext.create("RegistrationApp.store.StoreSessions",{});
        store.load({
            params: {
                id: formValues.sessionId
            },
            scope: this,
            callback: function(records,operation,success) {

                if (records.length == 1) {


                    // what I really want to do is some kind of "Ext.apply(" that will
                    //   apply all fields in my formValues to the record rather than one 
                    //   at a time here
                    records[0].set("description",formValues.description);
                    records[0].set("title",formValues.title);

                    // how do I stuff the record back into the store as a uncommitted record?
                    store.add(records[0]);


                    // force the REST store to PUT
                    store.sync();



                    var sessionsBySpeakerStore = Ext.getCmp("sessionsBySpeakerGridPanelId").store;
                    sessionsBySpeakerStore.load({
                        params: {
                            codeCampYearId: -1,
                            sessionId: -1,
                            attendeesId: formValues.attendeeId // no s here, boo boo on table sessionspeakers
                        }

                    });


                }
            }
        });


        */





    },

    onCheckboxselectionmodelSelectionChange: function(model, selected, eOpts) {
        // all records that are selected are passed in here.  we need to run through the store
        // itself and verify that is what we think we should have.
        var tagsSelected1 = [];
        Ext.each(selected,function(rec) {
            tagsSelected1.push(rec.getData().tagName); 
        });


        // find record in store and update it
        var tagList = Ext.getCmp("SessionTagsGridPanelId");
        var tagListStore = tagList.store;

        tagListStore.each(function(storeRec) {
            var storeRecTagName = storeRec.getData().tagName;
            var storeRecTaggedInSession = storeRec.getData().taggedInSession;
            var gridPanelTagged = Ext.Array.contains(tagsSelected1,storeRecTagName);

            if (storeRecTaggedInSession != gridPanelTagged) {
                storeRec.set("taggedInSession",gridPanelTagged);
            }
        });

    },

    onWindowAfterRender: function(component, eOpts) {
        /*
        var sessionEditForm = Ext.getCmp("sessionFormPanelEditorId").getForm();

        sessionEditForm.setValues(this.sessionData);
        */

        var speakerProfilePanel =  Ext.getCmp('speakerAfterLoginProfileId');
        var retData = speakerProfilePanel.getForm().getValues();

        //debugger;

        var tagList = Ext.getCmp("SessionTagsGridPanelId");
        var tagListStore = tagList.store;
        tagListStore.load({
            params: {
                sessionId: retData.attendeesId
            },
            callback: function(records,operation,success) {
                var sm = tagList.getSelectionModel();
                var recs = [];
                Ext.each(records,function(rec) {
                    if (rec.get("taggedInSession") === true) {
                        recs.push(rec);
                    }
                });
                sm.select(recs);
                tagList.getView().focusRow(0);
            }
        });
        //debugger;

        // get data from SpeakerSessions Panel on previous page (get selected row and data associated, use that to set values in this form)
        var sessionList = Ext.getCmp("sessionsBySpeakerGridPanelId").getSelectionModel().getSelection();
        if (sessionList.length > 0) {

            var sessionEditForm = Ext.getCmp("sessionFormPanelEditorId").getForm();
            sessionEditForm.loadRecord(sessionList[0]);



            //var data = sessionList[0].getData();   
            //var sessionEditForm = Ext.getCmp("sessionFormPanelEditorId").getForm();
            //sessionEditForm.setValues(data);
        }

    }

});